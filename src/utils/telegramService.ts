// Telegram Service –¥–ª—è MiaxiaLip
export interface TelegramMessage {
  name: string;
  phone: string;
  email?: string;
  instagram?: string;
  birthdate?: string;
  question?: string;
  service?: string;
  formType: 'quick' | 'detailed' | 'newsletter' | 'popup' | 'card_draw';
  leadScore?: number;
  analytics?: {
    timeOnSite: number;
    source: string;
    completionTime: number;
    interactions: number;
    userAgent: string;
  };
}

export interface TelegramResponse {
  success: boolean;
  method: 'telegram' | 'email' | 'both';
  message?: string;
  error?: string;
  telegramResult?: any;
  emailResult?: any;
}

export class TelegramService {
  private static readonly BOT_TOKEN = '7853031712:AAHS29d-x7_mWZ1zoNzP8kCbTOxW0vtI18w';
  private static readonly CHAT_ID = '7853031712';
  private static readonly BOT_USERNAME = '@miaxialip_tarot_bot';
  private static readonly BACKUP_EMAIL = 'miaxialip@gmail.com';

  // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram
  static formatTelegramMessage(data: TelegramMessage): string {
    const formTypeNames = {
      quick: '‚ö° –®–≤–∏–¥–∫–∞ –∑–∞—è–≤–∫–∞',
      detailed: 'üìã –î–µ—Ç–∞–ª—å–Ω–∞ –∑–∞—è–≤–∫–∞', 
      newsletter: 'üìß –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É',
      popup: 'üéØ Smart Popup',
      card_draw: 'üîÆ –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∏'
    };

    let message = `üîî –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ —Å–∞–π—Ç—É MiaxiaLip!\n\n`;
    
    // –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    message += `üé≠ –¢–∏–ø –∑–∞—è–≤–∫–∏: ${formTypeNames[data.formType]}\n`;
    message += `üë§ –Ü–º'—è: ${data.name}\n`;
    
    if (data.phone) {
      message += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\n`;
    }
    
    if (data.email) {
      message += `üìß Email: ${data.email}\n`;
    }
    
    if (data.instagram) {
      message += `üì∑ Instagram: ${data.instagram}\n`;
    }
    
    if (data.birthdate) {
      message += `üéÇ –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${data.birthdate}\n`;
    }
    
    if (data.service) {
      message += `üîÆ –ü–æ—Å–ª—É–≥–∞: ${data.service}\n`;
    }
    
    if (data.question) {
      message += `‚ùì –ü–∏—Ç–∞–Ω–Ω—è: ${data.question}\n`;
    }

    // –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞
    if (data.analytics) {
      message += `\nüìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞:\n`;
      message += `‚è±Ô∏è –ß–∞—Å –Ω–∞ —Å–∞–π—Ç—ñ: ${Math.floor(data.analytics.timeOnSite / 60)}:${(data.analytics.timeOnSite % 60).toString().padStart(2, '0')}\n`;
      message += `üåê –î–∂–µ—Ä–µ–ª–æ: ${data.analytics.source || '–ü—Ä—è–º–∏–π –ø–µ—Ä–µ—Ö—ñ–¥'}\n`;
      message += `‚ö° –ß–∞—Å –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è: ${Math.round(data.analytics.completionTime / 1000)} —Å–µ–∫\n`;
      message += `üñ±Ô∏è –í–∑–∞—î–º–æ–¥—ñ—ó: ${data.analytics.interactions}\n`;
    }

    if (data.leadScore) {
      message += `üéØ –õ—ñ–¥-—Å–∫–æ—Ä: ${data.leadScore}\n`;
    }

    message += `\nüìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('uk-UA', { 
      timeZone: 'Europe/Kiev',
      year: 'numeric',
      month: '2-digit', 
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    })}\n`;
    
    message += `\nüí´ –ó –ª—é–±–æ–≤'—é, MiaxiaLip Tarot ‚ú®`;

    return message;
  }

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ Telegram
  static async sendToTelegram(message: string): Promise<{ success: boolean; data?: any; error?: string }> {
    try {
      const response = await fetch(`https://api.telegram.org/bot${this.BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: this.CHAT_ID,
          text: message,
          parse_mode: 'HTML',
          disable_web_page_preview: true
        }),
      });

      const result = await response.json();

      if (response.ok && result.ok) {
        console.log('‚úÖ Telegram message sent successfully:', result);
        return { success: true, data: result };
      } else {
        console.error('‚ùå Telegram API error:', result);
        return { success: false, error: result.description || 'Telegram API error' };
      }
    } catch (error) {
      console.error('‚ùå Network error sending to Telegram:', error);
      return { success: false, error: 'Network error' };
    }
  }

  // Backup –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞ email
  static async sendBackupEmail(data: TelegramMessage): Promise<{ success: boolean; error?: string }> {
    try {
      const emailBody = this.formatEmailMessage(data);
      
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π API endpoint
      const response = await fetch('/api/send-telegram', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...data,
          backup: true,
          emailBody
        }),
      });

      const result = await response.json();
      
      if (response.ok && result.success) {
        console.log('‚úÖ Backup email sent successfully');
        return { success: true };
      } else {
        console.error('‚ùå Backup email failed:', result);
        return { success: false, error: result.error || 'Email sending failed' };
      }
    } catch (error) {
      console.error('‚ùå Backup email error:', error);
      return { success: false, error: 'Email service error' };
    }
  }

  // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è email
  static formatEmailMessage(data: TelegramMessage): string {
    const message = this.formatTelegramMessage(data);
    return message.replace(/[üîîüë§üì±üìßüì∑üéÇüîÆ‚ùìüìä‚è±Ô∏èüåê‚ö°üñ±Ô∏èüéØüìÖüí´‚ú®üé≠]/g, '');
  }

  // –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑ backup
  static async sendMessage(data: TelegramMessage): Promise<TelegramResponse> {
    const message = this.formatTelegramMessage(data);
    
    // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ Telegram
    const telegramResult = await this.sendToTelegram(message);
    
    if (telegramResult.success) {
      // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ —É—Å–ø—ñ—à–Ω—É –∫–æ–Ω–≤–µ—Ä—Å—ñ—é
      this.trackConversion(data.formType, 'telegram');
      
      return {
        success: true,
        method: 'telegram',
        message: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!',
        telegramResult: telegramResult.data
      };
    }

    // –Ø–∫—â–æ Telegram –Ω–µ –ø—Ä–∞—Ü—é—î, –ø—Ä–æ–±—É—î–º–æ email backup
    console.warn('‚ö†Ô∏è Telegram failed, trying email backup...');
    const emailResult = await this.sendBackupEmail(data);
    
    if (emailResult.success) {
      this.trackConversion(data.formType, 'email_backup');
      
      return {
        success: true,
        method: 'email',
        message: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –∫–∞–Ω–∞–ª!',
        emailResult
      };
    }

    // –Ø–∫—â–æ –æ–±–∏–¥–≤–∞ –º–µ—Ç–æ–¥–∏ –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å
    return {
      success: false,
      method: 'both',
      error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
      message: '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
    };
  }

  // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∫–æ–Ω–≤–µ—Ä—Å—ñ–π
  static trackConversion(formType: string, method: string) {
    if (typeof window !== 'undefined' && (window as any).gtag) {
      (window as any).gtag('event', 'form_submission_success', {
        event_category: 'conversion',
        event_label: `${formType}_${method}`,
        form_type: formType,
        delivery_method: method
      });
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ localStorage
    const stats = JSON.parse(localStorage.getItem('miaxialip_stats') || '{}');
    const today = new Date().toISOString().split('T')[0];
    
    if (!stats[today]) stats[today] = {};
    if (!stats[today][formType]) stats[today][formType] = 0;
    
    stats[today][formType]++;
    localStorage.setItem('miaxialip_stats', JSON.stringify(stats));
  }

  // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
  static async testConnection(): Promise<{ telegram: boolean; email: boolean }> {
    const testMessage = `üß™ –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è MiaxiaLip\n\n‚è∞ ${new Date().toLocaleString('uk-UA', { timeZone: 'Europe/Kiev' })}\n\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î!`;
    
    const telegramTest = await this.sendToTelegram(testMessage);
    const emailTest = await this.sendBackupEmail({
      name: 'Test User',
      phone: '+380000000000',
      formType: 'quick'
    });

    return {
      telegram: telegramTest.success,
      email: emailTest.success
    };
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  static getStats() {
    return JSON.parse(localStorage.getItem('miaxialip_stats') || '{}');
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if (typeof window !== 'undefined') {
  (window as any).TelegramService = TelegramService;
}