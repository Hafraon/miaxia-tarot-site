import { useState, useEffect, useCallback } from 'react';
import { TelegramService, TelegramMessage } from '../utils/telegramService';
import { LeadScore } from './useLeadScoring';

export type PopupType = 'exit-intent' | 'time-based' | 'behavior-based' | 'high-engagement';

interface PopupState {
  isOpen: boolean;
  type: PopupType | null;
  hasShown: {
    'exit-intent': boolean;
    'time-based': boolean;
    'behavior-based': boolean;
    'high-engagement': boolean;
  };
}

const useSmartPopups = (leadScore: LeadScore) => {
  const [popupState, setPopupState] = useState<PopupState>({
    isOpen: false,
    type: null,
    hasShown: {
      'exit-intent': false,
      'time-based': false,
      'behavior-based': false,
      'high-engagement': false
    }
  });
  const [showExitPopup, setShowExitPopup] = useState(false);
  const [exitIntentShown, setExitIntentShown] = useState(false);
  const [userIsFillingForm, setUserIsFillingForm] = useState(false); // ‚úÖ –î–û–î–ê–ù–û: —Å—Ç–∞—Ç—É—Å –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏

  // ‚úÖ –î–û–î–ê–ù–û: –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º
  useEffect(() => {
    const checkFormActivity = () => {
      const activeElement = document.activeElement;
      const isFormInput = activeElement && (
        activeElement.tagName === 'INPUT' ||
        activeElement.tagName === 'TEXTAREA' ||
        activeElement.tagName === 'SELECT'
      );
      
      const hasFormData = Array.from(document.querySelectorAll('input, textarea')).some(
        input => (input as HTMLInputElement).value.trim().length > 0
      );

      setUserIsFillingForm(isFormInput || hasFormData);
    };

    const interval = setInterval(checkFormActivity, 1000);
    return () => clearInterval(interval);
  }, []);

  // Exit intent detection - –ë–ï–ó –ó–ú–Ü–ù
  useEffect(() => {
    let isExiting = false;
    
    const handleMouseLeave = (e: MouseEvent) => {
      if (e.clientY <= 5 && !exitIntentShown && !isExiting && leadScore.timeOnSite > 30) {
        isExiting = true;
        setShowExitPopup(true);
        setExitIntentShown(true);
      }
    };

    const inactivityTimer = setTimeout(() => {
      if (!exitIntentShown && !isExiting && leadScore.timeOnSite > 45) {
        isExiting = true;
        setShowExitPopup(true);
        setExitIntentShown(true);
      }
    }, 45000);

    document.addEventListener('mouseleave', handleMouseLeave);
    
    return () => {
      document.removeEventListener('mouseleave', handleMouseLeave);
      clearTimeout(inactivityTimer);
    };
  }, [exitIntentShown, leadScore.timeOnSite]);

  // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: Time-based popup (5 —Ö–≤–∏–ª–∏–Ω –∑–∞–º—ñ—Å—Ç—å 3)
  useEffect(() => {
    if (
      leadScore.timeOnSite >= 300 && // ‚úÖ 5 —Ö–≤–∏–ª–∏–Ω –∑–∞–º—ñ—Å—Ç—å 180 —Å–µ–∫ (3 —Ö–≤)
      !popupState.hasShown['time-based'] &&
      !popupState.isOpen &&
      !userIsFillingForm // ‚úÖ –î–û–î–ê–ù–û: –Ω–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —è–∫—â–æ –∑–∞–ø–æ–≤–Ω—é—î —Ñ–æ—Ä–º—É
    ) {
      showPopup('time-based');
    }
  }, [leadScore.timeOnSite, popupState.hasShown, popupState.isOpen, userIsFillingForm]);

  // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: Behavior-based popup (–±—ñ–ª—å—à –∂–æ—Ä—Å—Ç–∫—ñ —É–º–æ–≤–∏)
  useEffect(() => {
    if (
      leadScore.interactions >= 10 && // ‚úÖ 10 –∑–∞–º—ñ—Å—Ç—å 5 –≤–∑–∞—î–º–æ–¥—ñ–π
      leadScore.scrollDepth >= 75 && // ‚úÖ 75% –∑–∞–º—ñ—Å—Ç—å 50% –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
      leadScore.timeOnSite > 180 && // ‚úÖ 3 —Ö–≤–∏–ª–∏–Ω–∏ –∑–∞–º—ñ—Å—Ç—å 60 —Å–µ–∫
      !popupState.hasShown['behavior-based'] &&
      !popupState.isOpen &&
      !userIsFillingForm // ‚úÖ –î–û–î–ê–ù–û: –Ω–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —è–∫—â–æ –∑–∞–ø–æ–≤–Ω—é—î —Ñ–æ—Ä–º—É
    ) {
      showPopup('behavior-based');
    }
  }, [leadScore.interactions, leadScore.scrollDepth, leadScore.timeOnSite, popupState.hasShown, popupState.isOpen, userIsFillingForm]);

  // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: High engagement popup (–¥–æ–¥–∞–Ω–æ –∑–∞—Ç—Ä–∏–º–∫—É)
  useEffect(() => {
    if (
      leadScore.level === 'vip' &&
      leadScore.timeOnSite > 120 && // ‚úÖ –î–û–î–ê–ù–û: –º—ñ–Ω—ñ–º—É–º 2 —Ö–≤–∏–ª–∏–Ω–∏ –Ω–∞–≤—ñ—Ç—å –¥–ª—è VIP
      !popupState.hasShown['high-engagement'] &&
      !popupState.isOpen &&
      !userIsFillingForm // ‚úÖ –î–û–î–ê–ù–û: –Ω–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —è–∫—â–æ –∑–∞–ø–æ–≤–Ω—é—î —Ñ–æ—Ä–º—É
    ) {
      showPopup('high-engagement');
    }
  }, [leadScore.level, leadScore.timeOnSite, popupState.hasShown, popupState.isOpen, userIsFillingForm]);

  const showPopup = useCallback((type: PopupType) => {
    // ‚úÖ –ó–ë–Ü–õ–¨–®–ï–ù–û: cooldown –∑ 1 –¥–æ 3 —Ö–≤–∏–ª–∏–Ω
    const lastPopupTime = localStorage.getItem('lastPopupTime');
    if (lastPopupTime && Date.now() - parseInt(lastPopupTime) < 180000) { // 3 —Ö–≤–∏–ª–∏–Ω–∏ cooldown
      console.log(`‚è∞ Popup ${type} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π cooldown'–æ–º`);
      return;
    }

    // ‚úÖ –î–û–î–ê–ù–û: –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
    if (userIsFillingForm) {
      console.log(`üìù Popup ${type} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–æ–≤–Ω—é—î —Ñ–æ—Ä–º—É`);
      return;
    }

    console.log(`üéØ –ü–æ–∫–∞–∑—É—î–º–æ popup: ${type}`);

    setPopupState(prev => ({
      ...prev,
      isOpen: true,
      type,
      hasShown: {
        ...prev.hasShown,
        [type]: true
      }
    }));

    localStorage.setItem('lastPopupTime', Date.now().toString());
  }, [userIsFillingForm]);

  const closePopup = useCallback(() => {
    console.log('‚ùå –ó–∞–∫—Ä–∏–≤–∞—î–º–æ popup');
    setPopupState(prev => ({
      ...prev,
      isOpen: false,
      type: null
    }));
  }, []);

  const handlePopupSubmit = useCallback(async (data: { name: string; phone: string; email: string }) => {
    try {
      const telegramData: TelegramMessage = {
        name: data.name,
        phone: data.phone,
        email: data.email,
        formType: 'popup',
        leadScore: leadScore.totalScore,
        analytics: {
          timeOnSite: leadScore.timeOnSite,
          source: document.referrer || 'direct',
          completionTime: 5000,
          interactions: leadScore.interactions,
          userAgent: navigator.userAgent
        }
      };

      const result = await TelegramService.sendMessage(telegramData);
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to send popup data');
      }

      if (typeof window !== 'undefined' && (window as any).gtag) {
        (window as any).gtag('event', 'smart_popup_conversion', {
          event_category: 'lead_generation',
          event_label: popupState.type,
          lead_score: leadScore.totalScore,
          lead_level: leadScore.level
        });
      }

      return true;
    } catch (error) {
      console.error('Error submitting popup form:', error);
      throw error;
    }
  }, [popupState.type, leadScore]);

  return {
    popupState,
    showExitPopup,
    setShowExitPopup,
    closePopup,
    handlePopupSubmit,
    showPopup
  };
};

export default useSmartPopups;
