import React, { useState } from 'react';
import { getRandomCard, getMultipleCards, TarotCard } from '../data/majorArcana';
import { trackCardDraw, trackButtonClick } from '../utils/analytics';
import AdvancedTarotCard from './AdvancedTarotCard';

interface CardOfDayProps {
  onFullReadingClick: () => void;
  onCardDraw?: () => void;
}

const CardOfDay: React.FC<CardOfDayProps> = ({ onFullReadingClick, onCardDraw }) => {
  const [selectedCard, setSelectedCard] = useState<TarotCard | null>(null);
  const [isFlipped, setIsFlipped] = useState(false);
  const [multipleCards, setMultipleCards] = useState<TarotCard[]>([]);
  const [showMultiple, setShowMultiple] = useState(false);
  const [flippedCards, setFlippedCards] = useState<Set<number>>(new Set());

  const handleDrawSingle = () => {
    trackCardDraw();
    onCardDraw?.();
    
    // Reset if already drawn
    if (isFlipped) {
      setIsFlipped(false);
      setSelectedCard(null);
      setShowMultiple(false);
      setMultipleCards([]);
      setFlippedCards(new Set());
      
      setTimeout(() => {
        const card = getRandomCard();
        setSelectedCard(card);
        setIsFlipped(true);
      }, 300);
    } else {
      const card = getRandomCard();
      setSelectedCard(card);
      setIsFlipped(true);
    }
  };

  const handleDrawMultiple = (count: number) => {
    trackButtonClick(`draw_${count}_cards`, 'card_of_day');
    onCardDraw?.();
    
    // Reset state
    setIsFlipped(false);
    setSelectedCard(null);
    setShowMultiple(false);
    setFlippedCards(new Set());
    
    setTimeout(() => {
      const cards = getMultipleCards(count);
      setMultipleCards(cards);
      setShowMultiple(true);
    }, 300);
  };

  const handleCardFlip = (cardIndex: number) => {
    setFlippedCards(prev => new Set([...prev, cardIndex]));
  };

  const resetAll = () => {
    setIsFlipped(false);
    setSelectedCard(null);
    setShowMultiple(false);
    setMultipleCards([]);
    setFlippedCards(new Set());
  };

  return (
    <section className="py-16 md:py-24 bg-purple/10">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12">
          <h2 className="section-title">–ö–∞—Ä—Ç–∏ –¢–∞—Ä–æ</h2>
          <p className="text-gray-300 max-w-xl mx-auto mb-8">
            –í—ñ–¥–∫—Ä–∏–π—Ç–µ —Ç–∞—î–º–Ω–∏—Ü—ñ –í–µ–ª–∏–∫–∏—Ö –ê—Ä–∫–∞–Ω—ñ–≤. –í–∏—Ç—è–≥–Ω—ñ—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø–æ–≤–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –¥–ª—è –≥–ª–∏–±—à–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è.
          </p>
          
          {/* Control Buttons */}
          <div className="flex flex-wrap justify-center gap-4 mb-8">
            <button 
              onClick={handleDrawSingle}
              className="btn-primary group"
              onMouseDown={() => trackButtonClick('draw_single_card', 'card_of_day')}
            >
              <span className="relative z-10 flex items-center">
                {isFlipped ? '–ù–æ–≤–∞ –∫–∞—Ä—Ç–∞' : '–ö–∞—Ä—Ç–∞ –¥–Ω—è'}
                <span className="ml-2">üîÆ</span>
              </span>
            </button>
            
            <button 
              onClick={() => handleDrawMultiple(3)}
              className="bg-purple hover:bg-purple/80 text-white px-6 py-3 rounded-md font-medium transition-all duration-300 hover:shadow-[0_0_15px_rgba(74,26,116,0.6)] transform hover:-translate-y-1"
            >
              3 –∫–∞—Ä—Ç–∏ ‚ú®
            </button>
            
            <button 
              onClick={() => handleDrawMultiple(5)}
              className="bg-gold/20 hover:bg-gold/30 text-gold border border-gold/50 px-6 py-3 rounded-md font-medium transition-all duration-300 hover:shadow-[0_0_15px_rgba(212,175,55,0.3)] transform hover:-translate-y-1"
            >
              5 –∫–∞—Ä—Ç üåü
            </button>
            
            {(isFlipped || showMultiple) && (
              <button 
                onClick={resetAll}
                className="bg-gray-600 hover:bg-gray-500 text-white px-4 py-3 rounded-md font-medium transition-all duration-300"
              >
                –°–∫–∏–Ω—É—Ç–∏ üîÑ
              </button>
            )}
          </div>
        </div>
        
        {/* Single Card Display */}
        {!showMultiple && (
          <div className="flex flex-col items-center justify-center gap-8">
            <AdvancedTarotCard
              card={selectedCard}
              isFlipped={isFlipped}
              onFlip={() => {}}
              size="large"
              showDetails={true}
            />
          </div>
        )}

        {/* Multiple Cards Display */}
        {showMultiple && multipleCards.length > 0 && (
          <div className="mb-12">
            <div className="text-center mb-8">
              <h3 className="text-2xl font-bold gold-gradient mb-4">
                {multipleCards.length === 3 ? '–†–æ–∑–∫–ª–∞–¥ "–ú–∏–Ω—É–ª–µ-–°—å–æ–≥–æ–¥–µ–Ω–Ω—è-–ú–∞–π–±—É—Ç–Ω—î"' : '–ü\'—è—Ç–∏–∫–∞—Ä—Ç–∫–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥'}
              </h3>
              <div className="flex justify-center gap-2 text-sm text-gray-400 mb-4">
                {multipleCards.length === 3 ? (
                  <>
                    <span>–ú–∏–Ω—É–ª–µ</span>
                    <span>‚Ä¢</span>
                    <span>–°—å–æ–≥–æ–¥–µ–Ω–Ω—è</span>
                    <span>‚Ä¢</span>
                    <span>–ú–∞–π–±—É—Ç–Ω—î</span>
                  </>
                ) : (
                  <>
                    <span>–°–∏—Ç—É–∞—Ü—ñ—è</span>
                    <span>‚Ä¢</span>
                    <span>–í–∏–∫–ª–∏–∫</span>
                    <span>‚Ä¢</span>
                    <span>–ú–∏–Ω—É–ª–µ</span>
                    <span>‚Ä¢</span>
                    <span>–ú–∞–π–±—É—Ç–Ω—î</span>
                    <span>‚Ä¢</span>
                    <span>–†–µ–∑—É–ª—å—Ç–∞—Ç</span>
                  </>
                )}
              </div>
            </div>
            
            <div className={`grid gap-6 justify-center ${
              multipleCards.length === 3 
                ? 'grid-cols-1 md:grid-cols-3 max-w-4xl mx-auto' 
                : 'grid-cols-1 md:grid-cols-3 lg:grid-cols-5 max-w-6xl mx-auto'
            }`}>
              {multipleCards.map((card, index) => (
                <div key={`${card.id}-${index}`} className="flex flex-col items-center">
                  <div className="mb-3">
                    <span className="text-sm text-gold font-semibold">
                      {multipleCards.length === 3 
                        ? ['–ú–∏–Ω—É–ª–µ', '–°—å–æ–≥–æ–¥–µ–Ω–Ω—è', '–ú–∞–π–±—É—Ç–Ω—î'][index]
                        : ['–°–∏—Ç—É–∞—Ü—ñ—è', '–í–∏–∫–ª–∏–∫', '–ú–∏–Ω—É–ª–µ', '–ú–∞–π–±—É—Ç–Ω—î', '–†–µ–∑—É–ª—å—Ç–∞—Ç'][index]
                      }
                    </span>
                  </div>
                  
                  <AdvancedTarotCard
                    card={card}
                    isFlipped={flippedCards.has(index)}
                    onFlip={() => handleCardFlip(index)}
                    size="medium"
                    showDetails={false}
                  />
                  
                  {flippedCards.has(index) && (
                    <div className="mt-4 max-w-xs text-center">
                      <p className="text-sm text-gray-300 mb-2">{card.shortMeaning}</p>
                      <p className="text-xs text-gray-400 italic">"{card.dailyAdvice}"</p>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}
        
        {/* Call to Action */}
        {(isFlipped || showMultiple) && (
          <div className="text-center mt-12 border-t border-purple/30 pt-8">
            <h3 className="text-2xl font-semibold mb-4 gold-gradient">
              –•–æ—á–µ—Ç–µ –≥–ª–∏–±—à–∏–π –∞–Ω–∞–ª—ñ–∑?
            </h3>
            <p className="text-gray-300 mb-6 max-w-2xl mx-auto">
              –¶—ñ –∫–∞—Ä—Ç–∏ –¥–∞—é—Ç—å –∑–∞–≥–∞–ª—å–Ω–µ —É—è–≤–ª–µ–Ω–Ω—è –ø—Ä–æ –µ–Ω–µ—Ä–≥—ñ—ó –Ω–∞–≤–∫–æ–ª–æ –≤–∞—Å. –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–±–æ—Ä—É –≤–∞—à–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó, 
              –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –ø–æ—Ä–∞–¥ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –∑–∞–º–æ–≤—Ç–µ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.
            </p>
            
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <button 
                onClick={onFullReadingClick}
                className="btn-primary"
                onMouseDown={() => trackButtonClick('get_full_reading', 'card_of_day')}
              >
                –ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ–≤–Ω—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é
              </button>
              
              <a 
                href="https://t.me/miaxialip_tarot_bot" 
                target="_blank" 
                rel="noopener noreferrer"
                className="bg-blue-600 hover:bg-blue-500 text-white px-6 py-3 rounded-md font-medium transition-all duration-300 hover:shadow-[0_0_15px_rgba(37,99,235,0.6)] transform hover:-translate-y-1 flex items-center justify-center"
                onMouseDown={() => trackButtonClick('telegram_bot', 'card_of_day')}
              >
                Telegram –±–æ—Ç –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏ ü§ñ
              </a>
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default CardOfDay;