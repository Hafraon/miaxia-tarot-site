import React, { useRef, useEffect, useState } from 'react';
import { Sparkles, Clock } from 'lucide-react';

interface ExitPopupProps {
  isOpen: boolean;
  onClose: () => void;
}

const ExitPopup: React.FC<ExitPopupProps> = ({ isOpen, onClose }) => {
  const popupRef = useRef<HTMLDivElement>(null);
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    email: ''
  });
  const [isUserInteracting, setIsUserInteracting] = useState(false);
  const [timeLeft, setTimeLeft] = useState(120); // 2 —Ö–≤–∏–ª–∏–Ω–∏
  const [isSubmitting, setIsSubmitting] = useState(false);

  // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ñ–æ—Ä–º–æ—é
  useEffect(() => {
    if (isOpen) {
      const handleUserActivity = () => {
        setIsUserInteracting(true);
        setTimeLeft(120); // –°–∫–∏–¥–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä—É –ø—Ä–∏ –≤–∑–∞—î–º–æ–¥—ñ—ó
      };

      // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
      const events = ['mousemove', 'keydown', 'click', 'scroll'];
      events.forEach(event => {
        document.addEventListener(event, handleUserActivity);
      });

      return () => {
        events.forEach(event => {
          document.removeEventListener(event, handleUserActivity);
        });
      };
    }
  }, [isOpen]);

  // –¢–∞–π–º–µ—Ä –∑–Ω–∏–∫–∞–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ù–ï –≤–∑–∞—î–º–æ–¥—ñ—î)
  useEffect(() => {
    if (isOpen && !isUserInteracting) {
      const timer = setInterval(() => {
        setTimeLeft((prev) => {
          if (prev <= 1) {
            onClose();
            return 0;
          }
          return prev - 1;
        });
      }, 1000);

      return () => clearInterval(timer);
    }
  }, [isOpen, isUserInteracting, onClose]);

  // –ó—É–ø–∏–Ω–∫–∞ —Ç–∞–π–º–µ—Ä—É –ø—Ä–∏ —Ñ–æ–∫—É—Å—ñ –Ω–∞ –ø–æ–ª—è
  const handleFieldFocus = () => {
    setIsUserInteracting(true);
    setTimeLeft(300); // –î–∞—î–º–æ 5 —Ö–≤–∏–ª–∏–Ω –Ω–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    handleFieldFocus(); // –ê–∫—Ç–∏–≤—É—î–º–æ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.name || !formData.phone) return;

    setIsSubmitting(true);
    try {
      // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ Telegram —á–µ—Ä–µ–∑ TelegramService
      const telegramData = {
        name: formData.name,
        phone: formData.phone,
        email: formData.email,
        service: 'Exit-Intent - –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è',
        formType: 'popup' as const,
        analytics: {
          timeOnSite: 120 - timeLeft,
          source: 'Exit Intent Popup',
          completionTime: 5000,
          interactions: 1,
          userAgent: navigator.userAgent
        }
      };

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π TelegramService —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
      if (typeof window !== 'undefined' && (window as any).TelegramService) {
        const result = await (window as any).TelegramService.sendMessage(telegramData);
        
        if (result.success) {
          // –ü–æ–∫–∞–∑–∞—Ç–∏ —É—Å–ø—ñ—Ö —Ç–∞ –∑–∞–∫—Ä–∏—Ç–∏ –ø–æ–ø–∞–ø
          alert('–î—è–∫—É—î–º–æ! –ó–≤\'—è–∂–µ–º–æ—Å—è –ø—Ä–æ—Ç—è–≥–æ–º 15 —Ö–≤–∏–ª–∏–Ω!');
          onClose();
        } else {
          throw new Error(result.error || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏');
        }
      } else {
        // Fallback –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ API
        const response = await fetch('/api/send-telegram', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(telegramData)
        });

        if (response.ok) {
          alert('–î—è–∫—É—î–º–æ! –ó–≤\'—è–∂–µ–º–æ—Å—è –ø—Ä–æ—Ç—è–≥–æ–º 15 —Ö–≤–∏–ª–∏–Ω!');
          onClose();
        } else {
          throw new Error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏');
        }
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ exit popup:', error);
      alert('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ —ñ–Ω—à–∏–º —Å–ø–æ—Å–æ–±–æ–º.');
    } finally {
      setIsSubmitting(false);
    }
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (popupRef.current && !popupRef.current.contains(event.target as Node)) {
        // –ù–µ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –ø–æ–ø–∞–ø–æ–º, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∑–∞—î–º–æ–¥—ñ—î
        if (!isUserInteracting) {
          onClose();
        }
      }
    };

    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
      document.addEventListener('keydown', handleEscape);
      document.body.style.overflow = 'hidden';
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
      document.removeEventListener('keydown', handleEscape);
      document.body.style.overflow = 'auto';
    };
  }, [isOpen, onClose, isUserInteracting]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
      <div className="absolute inset-0 bg-black/60 backdrop-blur-sm"></div>
      
      <div 
        ref={popupRef}
        className="relative bg-gradient-to-br from-purple-900 via-blue-900 to-purple-800 border-2 border-gold/30 rounded-lg shadow-xl max-w-md w-full p-6 md:p-8"
      >
        <button 
          onClick={onClose}
          className="absolute top-4 right-4 text-white/80 hover:text-white text-2xl leading-none transition-colors duration-300"
          aria-label="–ó–∞–∫—Ä–∏—Ç–∏"
        >
          √ó
        </button>
        
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ —Ç–∞–π–º–µ—Ä–æ–º */}
        <div className="text-center mb-6">
          <div className="flex items-center justify-center mb-3">
            <Sparkles className="h-6 w-6 text-gold mr-2" />
            <span className="text-lg text-yellow-300 font-semibold">
              –õ—ñ–¥-—Å–∫–æ—Ä 71 (WARM)
            </span>
          </div>
          
          <h2 className="text-2xl md:text-3xl font-bold text-white mb-3">
            –ó–∞—á–µ–∫–∞–π—Ç–µ! –ù–µ –π–¥—ñ—Ç—å –±–µ–∑ –ø–æ–¥–∞—Ä—É–Ω–∫–∞! üéÅ
          </h2>
          
          <p className="text-gray-200 mb-4">
            –û—Ç—Ä–∏–º–∞–π—Ç–µ <span className="text-gold font-semibold">–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É</span> –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é —Ç–∞—Ä–æ
          </p>
          
          {!isUserInteracting && timeLeft > 0 && (
            <div className="flex items-center justify-center text-yellow-300 text-sm bg-yellow-400/10 rounded-lg p-2 border border-yellow-400/30">
              <Clock className="h-4 w-4 mr-2" />
              <span>
                –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –∑–Ω–∏–∫–Ω–µ —á–µ—Ä–µ–∑ {Math.floor(timeLeft / 60)}:{(timeLeft % 60).toString().padStart(2, '0')}
              </span>
            </div>
          )}
          
          {isUserInteracting && (
            <div className="text-green-300 text-sm bg-green-400/10 rounded-lg p-2 border border-green-400/30">
              ‚úÖ –ú–∞—î—Ç–µ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —á–∞—Å—É –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
            </div>
          )}
        </div>

        {/* –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –±–ª–æ–∫ –ø—Ä–∏–≤–∞–±–ª–∏–≤–æ—Å—Ç—ñ */}
        <div className="bg-gradient-to-r from-gold to-yellow-400 text-darkblue p-4 rounded-lg mb-6 text-center">
          <h3 className="font-bold text-lg mb-1">–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è</h3>
          <p className="text-sm opacity-90">–¢—ñ–ª—å–∫–∏ –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ —Ö–æ—Ç—ñ–≤ –ø—ñ—Ç–∏!</p>
        </div>

        {/* –§–æ—Ä–º–∞ */}
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <input
              type="text"
              name="name"
              placeholder="–í–∞—à–µ —ñ–º'—è *"
              value={formData.name}
              onChange={handleChange}
              onFocus={handleFieldFocus}
              required
              className="w-full p-3 rounded-lg bg-white/10 text-white placeholder-gray-300 border border-white/20 focus:border-gold focus:outline-none focus:ring-2 focus:ring-gold/50 transition-all duration-300"
            />
          </div>
          
          <div>
            <input
              type="tel"
              name="phone"
              placeholder="–¢–µ–ª–µ—Ñ–æ–Ω *"
              value={formData.phone}
              onChange={handleChange}
              onFocus={handleFieldFocus}
              required
              className="w-full p-3 rounded-lg bg-white/10 text-white placeholder-gray-300 border border-white/20 focus:border-gold focus:outline-none focus:ring-2 focus:ring-gold/50 transition-all duration-300"
            />
            <p className="text-xs text-gray-400 mt-1 flex items-center">
              <span className="mr-1">‚¨ÜÔ∏è</span>
              –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ü–µ –ø–æ–ª–µ –¥–ª—è –∑–≤'—è–∑–∫—É
            </p>
          </div>
          
          <div>
            <input
              type="email"
              name="email"
              placeholder="Email (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)"
              value={formData.email}
              onChange={handleChange}
              onFocus={handleFieldFocus}
              className="w-full p-3 rounded-lg bg-white/10 text-white placeholder-gray-300 border border-white/20 focus:border-gold focus:outline-none focus:ring-2 focus:ring-gold/50 transition-all duration-300"
            />
          </div>

          <button 
            type="submit"
            disabled={isSubmitting || !formData.name || !formData.phone}
            className="w-full bg-gradient-to-r from-gold to-yellow-400 text-darkblue font-bold py-3 px-6 rounded-lg hover:from-yellow-400 hover:to-gold transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
          >
            {isSubmitting ? (
              <span className="flex items-center justify-center">
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è...
              </span>
            ) : (
              '–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é'
            )}
          </button>
        </form>

        {/* –ì–∞—Ä–∞–Ω—Ç—ñ—ó */}
        <div className="flex items-center justify-center mt-4 text-xs text-gray-400 space-x-4">
          <div className="flex items-center">
            <span className="mr-1">üîí</span>
            <span>–î–∞–Ω—ñ –∑–∞—Ö–∏—â–µ–Ω—ñ</span>
          </div>
          <div className="flex items-center">
            <span className="mr-1">‚ö°</span>
            <span>–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞ 15 —Ö–≤</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExitPopup;